{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","postId","handleSelectedPost","className","map","post","userId","title","type","onClick","id","BASE_URL","COMMENTS_URL","getPostComments","a","fetch","postComments","json","deletePostComment","commentId","method","deletedComment","postingComment","comment","body","JSON","stringify","headers","postedComment","NewCommentForm","reloadComments","useState","commentatorName","setCommentatorName","email","setEmail","commentBody","setCommentBody","handleFormSubmit","name","placeholder","value","onChange","event","target","getUserPosts","userPosts","getPostDetails","postsDetails","Loader","PostDetails","postDetails","setPostDetails","setPostComments","showCommentList","toggleShowCommentList","isCommentsLoading","toggleIsCommentsLoading","postCommentsFS","handleDeleteComment","Promise","all","postDetailsFS","useEffect","loadData","length","App","selectedUserId","setSelectedUserId","selectedPostId","setSelectedPostId","usersPosts","setUserPosts","arePostsLoading","toggleArePostsLoading","userPostsFromServer","htmlFor","currentTarget","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.863e887e.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  postId: number,\n  handleSelectedPost: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  postId,\n  handleSelectedPost,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`User #${post.userId}: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleSelectedPost(post.id)}\n            >\n              {postId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nconst COMMENTS_URL = `${BASE_URL}/comments`;\n\nexport const getPostComments = async (postId: number): Promise<PostComment[]> => {\n  const postComments = await fetch(`${COMMENTS_URL}?postId=${postId}`);\n\n  return postComments.json();\n};\n\nexport const deletePostComment = async (commentId: number): Promise<PostComment> => {\n  const deletedComment = await fetch(`${COMMENTS_URL}/${commentId}`, { method: 'DELETE' });\n\n  return deletedComment.json();\n};\n\nexport const postingComment = async (comment: Omit<PostComment, 'id'>): Promise<PostComment> => {\n  const postedComment = await fetch(COMMENTS_URL, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return postedComment.json();\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { postingComment } from '../../api/comments';\n\ntype Props = {\n  postId: number,\n  reloadComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, reloadComments }) => {\n  const [commentatorName, setCommentatorName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const handleCommentName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentatorName(event.target.value);\n  };\n\n  const handleEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const handleCommentBody = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentBody(event.target.value);\n  };\n\n  const handleFormSubmit = async () => {\n    if (commentatorName && commentatorName) {\n      await postingComment({\n        postId,\n        name: commentatorName,\n        email,\n        body: commentBody,\n      });\n      reloadComments();\n      setCommentatorName('');\n      setEmail('');\n      setCommentBody('');\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentatorName}\n          onChange={handleCommentName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={handleCommentBody}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={() => handleFormSubmit()}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  const userPosts = (userId === 0)\n    ? await fetch(`${BASE_URL}/posts`)\n    : await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return userPosts.json();\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const postsDetails = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return postsDetails.json();\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deletePostComment } from '../../api/comments';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<PostComment[]>([]);\n  const [showCommentList, toggleShowCommentList] = useState(true);\n  const [isCommentsLoading, toggleIsCommentsLoading] = useState(false);\n\n  const toggleCommentsShowing = () => {\n    toggleShowCommentList(!showCommentList);\n  };\n\n  const reloadComments = async () => {\n    toggleIsCommentsLoading(true);\n    const postCommentsFS = await getPostComments(postId);\n\n    setPostComments(postCommentsFS);\n    toggleIsCommentsLoading(false);\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    await deletePostComment(commentId);\n    reloadComments();\n  };\n\n  async function loadData() {\n    const [postDetailsFS, postCommentsFS] = await Promise.all([\n      getPostDetails(postId),\n      getPostComments(postId),\n    ]);\n\n    setPostDetails(postDetailsFS);\n    setPostComments(postCommentsFS);\n  }\n\n  useEffect(() => {\n    loadData();\n  }, [postId]);\n\n  if (!postDetails) {\n    return (\n      <h2>Post details are loading...</h2>\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {postComments.length === 0\n          ? (\n            <h4>There are no comments</h4>\n          )\n          : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={toggleCommentsShowing}\n            >\n              {showCommentList\n                ? `Hide ${postComments.length} comments`\n                : `Show ${postComments.length} comments`}\n            </button>\n          )}\n\n        {showCommentList && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handleDeleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      {isCommentsLoading && <Loader />}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            reloadComments={reloadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [usersPosts, setUserPosts] = useState<Post[]>([]);\n  const [arePostsLoading, toggleArePostsLoading] = useState(false);\n\n  const handleSelectedPost = (postId: number) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  const handleUserSelection = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.currentTarget;\n\n    setSelectedUserId(+value);\n    setSelectedPostId(0);\n  };\n\n  useEffect(() => {\n    (async function fetchUserPosts() {\n      toggleArePostsLoading(true);\n      const userPostsFromServer = await getUserPosts(selectedUserId);\n\n      setUserPosts(userPostsFromServer);\n      toggleArePostsLoading(false);\n    }());\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"selectUser\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"selectUser\"\n            value={selectedUserId}\n            onChange={handleUserSelection}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={usersPosts}\n            postId={selectedPostId}\n            handleSelectedPost={handleSelectedPost}\n          />\n          {arePostsLoading && <Loader />}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0\n            ? <PostDetails postId={selectedPostId} />\n            : <h3>Choose the post to see comments</h3>}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}